// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// PGSQL is an autogenerated mock type for the PGSQL type
type PGSQL struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *PGSQL) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Driver provides a mock function with given fields:
func (_m *PGSQL) Driver() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// NewPGSQL creates a new instance of PGSQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPGSQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *PGSQL {
	mock := &PGSQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
