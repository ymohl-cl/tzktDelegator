// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "github.com/ymohl-cl/tzktDelegator/internal/dto"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// DeleteDelegator provides a mock function with given fields: ctx, fromState
func (_m *Querier) DeleteDelegator(ctx context.Context, fromState int32) ([]int64, error) {
	ret := _m.Called(ctx, fromState)

	var r0 []int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) ([]int64, error)); ok {
		return rf(ctx, fromState)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) []int64); ok {
		r0 = rf(ctx, fromState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, fromState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertDelegator provides a mock function with given fields: ctx, arg
func (_m *Querier) InsertDelegator(ctx context.Context, arg dto.InsertDelegatorParams) (dto.TzktDelegation, error) {
	ret := _m.Called(ctx, arg)

	var r0 dto.TzktDelegation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertDelegatorParams) (dto.TzktDelegation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.InsertDelegatorParams) dto.TzktDelegation); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(dto.TzktDelegation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.InsertDelegatorParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchDelegator provides a mock function with given fields: ctx, arg
func (_m *Querier) SearchDelegator(ctx context.Context, arg dto.SearchDelegatorParams) ([]dto.TzktDelegation, error) {
	ret := _m.Called(ctx, arg)

	var r0 []dto.TzktDelegation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.SearchDelegatorParams) ([]dto.TzktDelegation, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.SearchDelegatorParams) []dto.TzktDelegation); ok {
		r0 = rf(ctx, arg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.TzktDelegation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.SearchDelegatorParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
