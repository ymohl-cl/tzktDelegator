// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package dto

import (
	"context"
	"time"
)

const DeleteDelegator = `-- name: DeleteDelegator :many
DELETE FROM tzkt.Delegation
WHERE
	block_state > $1::integer
RETURNING internal_id
`

// DeleteDelegator query function
// list parameters
// @from_state::integer define the last valide block state
func (q *Queries) DeleteDelegator(ctx context.Context, fromState int32) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, DeleteDelegator, fromState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var internal_id int64
		if err := rows.Scan(&internal_id); err != nil {
			return nil, err
		}
		items = append(items, internal_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertDelegator = `-- name: InsertDelegator :one

INSERT INTO tzkt.Delegation (
	delegation_date,
	delegator_address,
	block_hash,
	amount,
	block_state,
	external_id
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
) RETURNING internal_id, external_id, delegation_date, delegator_address, block_hash, amount, block_state
`

type InsertDelegatorParams struct {
	DelegationDate   time.Time
	DelegatorAddress string
	BlockHash        string
	Amount           string
	BlockState       int64
	ExternalID       int64
}

// queries for sqlc
func (q *Queries) InsertDelegator(ctx context.Context, arg InsertDelegatorParams) (TzktDelegation, error) {
	row := q.db.QueryRowContext(ctx, InsertDelegator,
		arg.DelegationDate,
		arg.DelegatorAddress,
		arg.BlockHash,
		arg.Amount,
		arg.BlockState,
		arg.ExternalID,
	)
	var i TzktDelegation
	err := row.Scan(
		&i.InternalID,
		&i.ExternalID,
		&i.DelegationDate,
		&i.DelegatorAddress,
		&i.BlockHash,
		&i.Amount,
		&i.BlockState,
	)
	return i, err
}

const SearchDelegator = `-- name: SearchDelegator :many
SELECT internal_id, external_id, delegation_date, delegator_address, block_hash, amount, block_state FROM tzkt.Delegation
WHERE
	($1::integer = 0 OR $1 = EXTRACT(YEAR FROM delegation_date))
ORDER BY delegation_date DESC
LIMIT
CASE
	WHEN
		($2::integer > 0)
	THEN $2
END
`

type SearchDelegatorParams struct {
	DelegationYear int32
	LimitItem      int32
}

// SearchDelegator query function
// list parameters
// @delegation_year::text year of the delegation
// @limit_item::integer maximum number of items
func (q *Queries) SearchDelegator(ctx context.Context, arg SearchDelegatorParams) ([]TzktDelegation, error) {
	rows, err := q.db.QueryContext(ctx, SearchDelegator, arg.DelegationYear, arg.LimitItem)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TzktDelegation
	for rows.Next() {
		var i TzktDelegation
		if err := rows.Scan(
			&i.InternalID,
			&i.ExternalID,
			&i.DelegationDate,
			&i.DelegatorAddress,
			&i.BlockHash,
			&i.Amount,
			&i.BlockState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
